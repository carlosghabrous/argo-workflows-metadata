name: Deploy Argo Workflow (Multi-Env)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout metadata repo
        uses: actions/checkout@v4
        with: 
            fetch-depth: 0 # Fetch all history for accurate diff

      - name: Detect workflow name, environment, image tag, and namespace
        id: detect
        run: |
          FILE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | head -n 1)
          echo "Detected file: $FILE"

          WORKFLOW_NAME=$(basename "$FILE" .yaml)
          echo "detected workflow name: $WORKFLOW_NAME"

          ENVIRONMENT=$(echo "$FILE" | cut -d '/' -f 1)
          echo "detected environment: $ENVIRONMENT"

          IMAGE_TAG=$(grep '^image_tag:' "$FILE" | awk '{ print $2 }')
          echo "detected image tag: $IMAGE_TAG"

          NAMESPACE=$(grep '^namespace:' "$FILE" | awk '{ print $2 }')
          echo "detected namespace: $NAMESPACE" 

          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

    #   - name: Set cluster context based on environment
    #     run: |
    #       case "${{ steps.detect.outputs.environment }}" in
    #         staging)
    #           # Example for GKE
    #           gcloud container clusters get-credentials staging-cluster \
    #             --zone us-central1-a --project my-staging-project
    #           ;;
    #         production)
    #           gcloud container clusters get-credentials production-cluster \
    #             --zone us-central1-b --project my-prod-project
    #           ;;
    #         *)
    #           echo "Unknown environment: ${{ steps.detect.outputs.environment }}"
    #           exit 1
    #           ;;
    #       esac

    #   - name: Patch Argo WorkflowTemplate with new image_tag
    #     run: |
    #       kubectl patch workflowtemplate "${{ steps.detect.outputs.workflow_name }}" \
    #         --namespace "${{ steps.detect.outputs.namespace }}" \
    #         --type='json' \
    #         -p="[
    #           {
    #             \"op\": \"replace\",
    #             \"path\": \"/spec/arguments/parameters/0/value\",
    #             \"value\": \"${{ steps.detect.outputs.image_tag }}\"
    #           }
    #         ]"
